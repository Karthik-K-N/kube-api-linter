package a

type A struct {
	// required field should not be picked up.
	// +required
	RequiredField string `json:"requiredField,omitempty"`

	// pointerString is a pointer string field.
	// +optional
	PointerString *string `json:"pointerString,omitempty"`

	// pointerStringWithMinLength1 with minimum length is a pointer string field.
	// +kubebuilder:validation:MinLength=1
	// +optional
	PointerStringWithMinLength1 string `json:"pointerStringWithMinLength1,omitempty"` // want "field PointerStringWithMinLength1 does not allow the zero value. The field does not need to be a pointer."

	// pointerStringWithMinLength0 with minimum length is a pointer string field.
	// +kubebuilder:validation:MinLength=0
	// +optional
	PointerStringWithMinLength0 *string `json:"pointerStringWithMinLength0,omitempty"`

	// pointerInt is a pointer int field.
	// +optional
	PointerInt *int `json:"pointerInt,omitempty"`

	// pointerIntWithMinValue1 with minimum value is a pointer int field.
	// +kubebuilder:validation:Minimum=1
	// +optional
	PointerIntWithMinValue1 int `json:"pointerIntWithMinValue1,omitempty"` // want "field PointerIntWithMinValue1 does not allow the zero value. The field does not need to be a pointer."

	// pointerIntWithMinValue0 with minimum value is a pointer int field.
	// +kubebuilder:validation:Minimum=0
	// +optional
	PointerIntWithMinValue0 *int `json:"pointerIntWithMinValue0,omitempty"`

	// pointerIntWithNegativeMaximumValue with negative maximum value is a pointer int field.
	// +kubebuilder:validation:Maximum=-1
	// +optional
	PointerIntWithNegativeMaximumValue int `json:"pointerIntWithNegativeMaximumValue,omitempty"` // want "field PointerIntWithNegativeMaximumValue does not allow the zero value. The field does not need to be a pointer."

	// pointerIntWithNegativeMinimumValue with negative minimum value is a pointer int field.
	// +kubebuilder:validation:Minimum=-1
	// +optional
	PointerIntWithNegativeMinimumValue *int `json:"pointerIntWithNegativeMinimumValue,omitempty"`

	// pointerIntWithPositiveMaximumValue with positive maximum value is a pointer int field.
	// +kubebuilder:validation:Maximum=1
	// +optional
	PointerIntWithPositiveMaximumValue *int `json:"pointerIntWithPositiveMaximumValue,omitempty"`

	// pointerIntWithRange is a pointer int field with a range of values including 0.
	// +kubebuilder:validation:Minimum=-10
	// +kubebuilder:validation:Maximum=10
	// +optional
	PointerIntWithRange *int `json:"pointerIntWithRange,omitempty"`

	// pointerStruct is a pointer struct field.
	// +optional
	PointerStruct *B `json:"pointerStruct,omitempty"`

	// string is a string field.
	// +optional
	String *string `json:"string,omitempty"` // want "field String has a valid zero value \\(\"\"\\), but the validation is not complete \\(e.g. minimum length\\). The field should be a pointer to allow the zero value to be set. If the zero value is not a valid use case, complete the validation and remove the pointer."

	// stringWithMinLength1 with minimum length is a string field.
	// +kubebuilder:validation:MinLength=1
	// +optional
	StringWithMinLength1 string `json:"stringWithMinLength1,omitempty"`

	// stringWithMinLength0 with minimum length is a string field.
	// +kubebuilder:validation:MinLength=0
	// +optional
	StringWithMinLength0 *string `json:"stringWithMinLength0,omitempty"` // want "field StringWithMinLength0 has a valid zero value \\(\"\"\\) and should be a pointer."

	// int is an int field.
	// +optional
	Int *int `json:"int,omitempty"` // want "field Int has a valid zero value \\(0\\), but the validation is not complete \\(e.g. minimum/maximum\\). The field should be a pointer to allow the zero value to be set. If the zero value is not a valid use case, complete the validation and remove the pointer."

	// intWithMinValue1 with minimum value is an int field.
	// +kubebuilder:validation:Minimum=1
	// +optional
	IntWithMinValue1 int `json:"intWithMinValue1,omitempty"`

	// intWithMinValue0 with minimum value is an int field.
	// +kubebuilder:validation:Minimum=0
	// +optional
	IntWithMinValue0 *int `json:"intWithMinValue0,omitempty"` // want "field IntWithMinValue0 has a valid zero value \\(0\\) and should be a pointer."

	// intWithNegativeMaximumValue with negative maximum value is an int field.
	// +kubebuilder:validation:Maximum=-1
	// +optional
	IntWithNegativeMaximumValue int `json:"intWithNegativeMaximumValue,omitempty"`

	// intWithNegativeMinimumValue with negative minimum value is an int field.
	// +kubebuilder:validation:Minimum=-1
	// +optional
	IntWithNegativeMinimumValue *int `json:"intWithNegativeMinimumValue,omitempty"` // want "field IntWithNegativeMinimumValue has a valid zero value \\(0\\), but the validation is not complete \\(e.g. minimum/maximum\\). The field should be a pointer to allow the zero value to be set. If the zero value is not a valid use case, complete the validation and remove the pointer."

	// intWithPositiveMaximumValue with positive maximum value is an int field.
	// +kubebuilder:validation:Maximum=1
	// +optional
	IntWithPositiveMaximumValue *int `json:"intWithPositiveMaximumValue,omitempty"` // want "field IntWithPositiveMaximumValue has a valid zero value \\(0\\), but the validation is not complete \\(e.g. minimum/maximum\\). The field should be a pointer to allow the zero value to be set. If the zero value is not a valid use case, complete the validation and remove the pointer."

	// intWithRange is an int field with a range of values including 0.
	// +kubebuilder:validation:Minimum=-10
	// +kubebuilder:validation:Maximum=10
	// +optional
	IntWithRange *int `json:"intWithRange,omitempty"` // want "field IntWithRange has a valid zero value \\(0\\) and should be a pointer."

	// intWithInvalidMinimumValue with invalid minimum value is an int field.
	// +kubebuilder:validation:Minimum=foo
	// +optional
	IntWithInvalidMinimumValue int `json:"intWithInvalidMinimumValue,omitempty"` // want "field IntWithInvalidMinimumValue has an invalid minimum marker: error getting marker value: error converting value to number: strconv.ParseFloat: parsing \\\"foo\\\": invalid syntax"

	// intWithInvalidMaximumValue with invalid maximum value is an int field.
	// +kubebuilder:validation:Maximum=foo
	// +optional
	IntWithInvalidMaximumValue int `json:"intWithInvalidMaximumValue,omitempty"` // want "field IntWithInvalidMaximumValue has an invalid maximum marker: error getting marker value: error converting value to number: strconv.ParseFloat: parsing \\\"foo\\\": invalid syntax"

	// float is a float field.
	// +optional
	Float *float64 `json:"float,omitempty"` // want "field Float has a valid zero value \\(0.0\\), but the validation is not complete \\(e.g. minimum/maximum\\). The field should be a pointer to allow the zero value to be set. If the zero value is not a valid use case, complete the validation and remove the pointer."

	// floatWithMinValue1 with minimum value is a float field.
	// +kubebuilder:validation:Minimum=1.0
	// +optional
	FloatWithMinValue1 float64 `json:"floatWithMinValue1,omitempty"`

	// floatWithMinValue0 with minimum value is a float field.
	// +kubebuilder:validation:Minimum=0.0
	// +optional
	FloatWithMinValue0 *float64 `json:"floatWithMinValue0,omitempty"` // want "field FloatWithMinValue0 has a valid zero value \\(0.0\\) and should be a pointer."

	// floatWithNegativeMaximumValue with negative maximum value is a float field.
	// +kubebuilder:validation:Maximum=-1.0
	// +optional
	FloatWithNegativeMaximumValue float64 `json:"floatWithNegativeMaximumValue,omitempty"`

	// floatWithNegativeMinimumValue with negative minimum value is a float field.
	// +kubebuilder:validation:Minimum=-1.0
	// +optional
	FloatWithNegativeMinimumValue *float64 `json:"floatWithNegativeMinimumValue,omitempty"` // want "field FloatWithNegativeMinimumValue has a valid zero value \\(0.0\\), but the validation is not complete \\(e.g. minimum/maximum\\). The field should be a pointer to allow the zero value to be set. If the zero value is not a valid use case, complete the validation and remove the pointer."

	// floatWithPositiveMaximumValue with positive maximum value is a float field.
	// +kubebuilder:validation:Maximum=1.0
	// +optional
	FloatWithPositiveMaximumValue *float64 `json:"floatWithPositiveMaximumValue,omitempty"` // want "field FloatWithPositiveMaximumValue has a valid zero value \\(0.0\\), but the validation is not complete \\(e.g. minimum/maximum\\). The field should be a pointer to allow the zero value to be set. If the zero value is not a valid use case, complete the validation and remove the pointer."

	// floatWithRange is a float field with a range of values including 0.
	// +kubebuilder:validation:Minimum=-10.0
	// +kubebuilder:validation:Maximum=10.0
	// +optional
	FloatWithRange *float64 `json:"floatWithRange,omitempty"` // want "field FloatWithRange has a valid zero value \\(0.0\\) and should be a pointer."

	// floatWithInvalidMinimumValue with invalid minimum value is a float field.
	// +kubebuilder:validation:Minimum=foo
	// +optional
	FloatWithInvalidMinimumValue float64 `json:"floatWithInvalidMinimumValue,omitempty"` // want "field FloatWithInvalidMinimumValue has an invalid minimum marker: error getting marker value: error converting value to number: strconv.ParseFloat: parsing \\\"foo\\\": invalid syntax"

	// floatWithInvalidMaximumValue with invalid maximum value is a float field.
	// +kubebuilder:validation:Maximum=foo
	// +optional
	FloatWithInvalidMaximumValue float64 `json:"floatWithInvalidMaximumValue,omitempty"` // want "field FloatWithInvalidMaximumValue has an invalid maximum marker: error getting marker value: error converting value to number: strconv.ParseFloat: parsing \\\"foo\\\": invalid syntax"

	// structWithOptionalFields is a struct field.
	// +optional
	StructWithOptionalFields *B `json:"structWithOptionalFields,omitempty"` // want "field StructWithOptionalFields has a valid zero value \\(\\{\\}\\), but the validation is not complete \\(e.g. min properties/adding required fields\\). The field should be a pointer to allow the zero value to be set. If the zero value is not a valid use case, complete the validation and remove the pointer."

	// structWithMinProperties is a struct field with a minimum number of properties.
	// +kubebuilder:validation:MinProperties=1
	// +optional
	StructWithMinProperties B `json:"structWithMinProperties,omitzero,omitempty"` // want "field StructWithMinProperties does not allow the zero value. It must have the omitzero tag."

	// structWithMinPropertiesOnStruct is a struct field with a minimum number of properties on the struct.
	// +optional
	StructWithMinPropertiesOnStruct D `json:"structWithMinPropertiesOnStruct,omitzero,omitempty"` // want "field StructWithMinPropertiesOnStruct does not allow the zero value. It must have the omitzero tag."

	// structWithRequiredFields is a struct field.
	// +optional
	StructWithRequiredFields *C `json:"structWithRequiredFields,omitempty"` // want "field StructWithRequiredFields has a valid zero value \\(\\{\"string\": \"\"\\}\\) and should be a pointer."

	// structWithRequiredFieldsFromAnotherFile is a struct field.
	// +optional
	StructWithRequiredFieldsFromAnotherFile *StructWithRequiredField `json:"structWithRequiredFields,omitempty"` // want "field StructWithRequiredFieldsFromAnotherFile has a valid zero value \\(\\{\"string\": \"\"\\}\\) and should be a pointer."

	// pointerStructWithOptionalFields is a pointer struct field.
	// +optional
	PointerStructWithOptionalFields *B `json:"pointerStructWithOptionalFields,omitempty"`

	// pointerStructWithRequiredFields is a pointer struct field.
	// +optional
	PointerStructWithRequiredFields *C `json:"pointerStructWithRequiredFields,omitempty"`

	// pointerStructWithRequiredFromAnotherFile is a pointer struct field.
	// +optional
	PointerStructWithRequiredFromAnotherFile *StructWithRequiredField `json:"pointerStructWithRequiredFromAnotherFile,omitempty"`

	// bool is a boolean field.
	// +optional
	Bool *bool `json:"bool,omitempty"` // want "field Bool has a valid zero value \\(false\\) and should be a pointer."

	// boolPointer is a pointer boolean field.
	// +optional
	BoolPointer *bool `json:"boolPointer,omitempty"`

	// slice is a slice field.
	// +optional
	Slice []string `json:"slice,omitempty"`

	// map is a map field.
	// +optional
	Map map[string]string `json:"map,omitempty"`

	// PointerSlice is a pointer slice field.
	// +optional
	PointerSlice []string `json:"pointerSlice,omitempty"` // want "field PointerSlice underlying type does not need to be a pointer. The pointer should be removed."

	// PointerMap is a pointer map field.
	// +optional
	PointerMap map[string]string `json:"pointerMap,omitempty"` // want "field PointerMap underlying type does not need to be a pointer. The pointer should be removed."

	// PointerPointerString is a double pointer string field.
	// +optional
	DoublePointerString *string `json:"doublePointerString,omitempty"` // want "field DoublePointerString underlying type does not need to be a pointer. The pointer should be removed."

	// PointerStringAlias is a pointer string alias field.
	// +optional
	PointerStringAlias *StringAlias `json:"pointerStringAlias,omitempty"`

	// PointerIntAlias is a pointer int alias field.
	// +optional
	PointerIntAlias *IntAlias `json:"pointerIntAlias,omitempty"`

	// PointerFloatAlias is a pointer float alias field.
	// +optional
	PointerFloatAlias *FloatAlias `json:"pointerFloatAlias,omitempty"`

	// PointerBoolAlias is a pointer bool alias field.
	// +optional
	PointerBoolAlias *BoolAlias `json:"pointerBoolAlias,omitempty"`

	// PointerSliceAlias is a pointer slice alias field.
	// +optional
	PointerSliceAlias SliceAlias `json:"pointerSliceAlias,omitempty"` // want "field PointerSliceAlias underlying type does not need to be a pointer. The pointer should be removed."

	// PointerMapAlias is a pointer map alias field.
	// +optional
	PointerMapAlias MapAlias `json:"pointerMapAlias,omitempty"` // want "field PointerMapAlias underlying type does not need to be a pointer. The pointer should be removed."

	// StringAlias is a string alias field.
	// +optional
	StringAlias *StringAlias `json:"stringAlias,omitempty"` // want "field StringAlias has a valid zero value \\(\"\"\\), but the validation is not complete \\(e.g. minimum length\\). The field should be a pointer to allow the zero value to be set. If the zero value is not a valid use case, complete the validation and remove the pointer."

	// IntAlias is an int alias field.
	// +optional
	IntAlias *IntAlias `json:"intAlias,omitempty"` // want "field IntAlias has a valid zero value \\(0\\), but the validation is not complete \\(e.g. minimum/maximum\\). The field should be a pointer to allow the zero value to be set. If the zero value is not a valid use case, complete the validation and remove the pointer."

	// FloatAlias is a float alias field.
	// +optional
	FloatAlias *FloatAlias `json:"floatAlias,omitempty"` // want "field FloatAlias has a valid zero value \\(0.0\\), but the validation is not complete \\(e.g. minimum/maximum\\). The field should be a pointer to allow the zero value to be set. If the zero value is not a valid use case, complete the validation and remove the pointer."

	// BoolAlias is a bool alias field.
	// +optional
	BoolAlias *BoolAlias `json:"boolAlias,omitempty"` // want "field BoolAlias has a valid zero value \\(false\\) and should be a pointer."

	// SliceAlias is a slice alias field.
	// +optional
	SliceAlias SliceAlias `json:"sliceAlias,omitempty"`

	// MapAlias is a map alias field.
	// +optional
	MapAlias MapAlias `json:"mapAlias,omitempty"`

	// StringAliasWithEnum is a string alias field with enum validation.
	// The zero value ("") is not in the enum, so this should NOT be a pointer.
	// +optional
	StringAliasWithEnum StringAliasWithEnum `json:"stringAliasWithEnum,omitempty"`

	// StringAliasWithEnumPointer is a pointer string alias field with enum validation.
	// This should NOT be a pointer since the zero value is not valid.
	// +optional
	StringAliasWithEnumPointer StringAliasWithEnum `json:"stringAliasWithEnumPointer,omitempty"` // want "field StringAliasWithEnumPointer does not allow the zero value. The field does not need to be a pointer."

	// StringAliasWithEnumNoOmitEmpty is a string alias field with enum validation and no omitempty.
	// +optional
	StringAliasWithEnumNoOmitEmpty StringAliasWithEnum `json:"stringAliasWithEnumNoOmitEmpty,omitempty"` // want "field StringAliasWithEnumNoOmitEmpty should have the omitempty tag."

	// StringAliasWithEnumEmptyValue is a string alias field with enum validation and empty value.
	// +optional
	StringAliasWithEnumEmptyValue *StringAliasWithEnumEmptyValue `json:"stringAliasWithEnumEmptyValue,omitempty"`

	// structWithMinPropertiesAndOmitEmptyAndOmitZero is a struct field with a minimum number of properties and has both omitzero and omitempty tag.
	// +kubebuilder:validation:MinProperties=1
	// +optional
	StructWithMinPropertiesAndOmitEmptyAndOmitZero B `json:"structWithMinPropertiesAndOmitEmptyAndOmitZero,omitzero,omitempty"`

	// structWithOnlyOmitZeroTag is a struct field with a minimum number of properties and has only omitzero tag.
	// +kubebuilder:validation:MinProperties=1
	// +optional
	StructWithOnlyOmitZeroTag B `json:"structWithOnlyOmitZeroTag,omitzero"`

	// structWithNotValidZeroValue is a struct field with a minimum number of properties on the struct so not a valid zero value.
	// +optional
	StructWithNotValidZeroValue D `json:"structWithNotValidZeroValue,omitzero,omitempty"` // want "field StructWithNotValidZeroValue does not allow the zero value. It must have the omitzero tag" "field StructWithNotValidZeroValue does not allow the zero value. The field does not need to be a pointer."

	// structWithNotValidZeroValueWithOmitZero is a struct field with a minimum number of properties on the struct so not a valid zero value.
	// +optional
	StructWithNotValidZeroValueWithOmitZero D `json:"structWithNotValidZeroValueWithOmitZero,omitzero,omitempty"` // want "field StructWithNotValidZeroValueWithOmitZero does not allow the zero value. The field does not need to be a pointer."

	// structWithValidOmitZero is a struct field with a minimum number of properties on the struct so not a valid zero value.
	// +optional
	StructWithValidOmitZero D `json:"structWithValidOmitZero,omitempty,omitzero"` // want "field StructWithValidOmitZero does not allow the zero value. The field does not need to be a pointer."

	// structWithOnlyOmitZero is a struct field with a minimum number of properties on the struct so not a valid zero value.
	// +optional
	StructWithOnlyOmitZero D `json:"structWithOnlyOmitZero,omitzero"` // want "field StructWithOnlyOmitZero does not allow the zero value. The field does not need to be a pointer."
}

type B struct {
	// pointerString is a pointer string field.
	// +kubebuilder:validation:MinLength=0
	// +optional
	PointerString *string `json:"pointerString,omitempty"`
}

type C struct {
	// string is a string field.
	// +required
	String string `json:"string"`
}

// +kubebuilder:validation:MinProperties=1
type D struct {
	// string is a string field.
	// +optional
	String *string `json:"string,omitempty"` // want "field String has a valid zero value \\(\"\"\\), but the validation is not complete \\(e.g. minimum length\\). The field should be a pointer to allow the zero value to be set. If the zero value is not a valid use case, complete the validation and remove the pointer."

	// stringWithMinLength1 with minimum length is a string field.
	// +kubebuilder:validation:MinLength=1
	// +optional
	StringWithMinLength1 string `json:"stringWithMinLength1,omitempty"`
}

type StringAlias string

type IntAlias int

type FloatAlias float64

type BoolAlias bool

type SliceAlias []string

type MapAlias map[string]string

// StringAliasWithEnum is a string alias with enum validation.
// The zero value ("") is not in the enum, making it invalid.
// +kubebuilder:validation:Enum=value1;value2
type StringAliasWithEnum string

// StringAliasWithEnumEmptyValue is a string alias with enum validation and empty value.
// +kubebuilder:validation:Enum=value1;value2;""
type StringAliasWithEnumEmptyValue string
