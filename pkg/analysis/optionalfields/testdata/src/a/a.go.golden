package a

type A struct {
	// required field should not be picked up.
	// +required
	RequiredField string `json:"requiredField,omitempty"`

	// pointerString is a pointer string field.
	// +optional
	PointerString *string `json:"pointerString,omitempty"`

	// pointerInt is a pointer int field.
	// +optional
	PointerInt *int `json:"pointerInt,omitempty"`

	// pointerStruct is a pointer struct field.
	// +optional
	PointerStruct *B `json:"pointerStruct,omitempty"`

	// string is a string field.
	// +optional
	String *string `json:"string,omitempty"` // want "field String should be a pointer."

	// NonOmittedString is a string field without omitempty
	// +optional
	NonOmittedString *string `json:"nonOmittedString,omitempty"` // want "field NonOmittedString should be a pointer." "field NonOmittedString should have the omitempty tag."

	// int is an int field.
	// +optional
	Int *int `json:"int,omitempty"` // want "field Int should be a pointer."

	// nonOmittedInt is an int field without omitempty
	// +optional
	NonOmittedInt *int `json:"nonOmittedInt,omitempty"` // want "field NonOmittedInt should be a pointer." "field NonOmittedInt should have the omitempty tag."

	// struct is a struct field.
	// +optional
	Struct *B `json:"struct,omitempty"` // want "field Struct should be a pointer."

    // nonOmittedStruct is a struct field without omitempty.
	// +optional
	NonOmittedStruct *B `json:"nonOmittedStruct,omitempty"` // want "field NonOmittedStruct should be a pointer." "field NonOmittedStruct should have the omitempty tag."

    // structWithMinProperties is a struct field with a minimum number of properties.
	// +kubebuilder:validation:MinProperties=1
	// +optional
	StructWithMinProperties *B `json:"structWithMinProperties,omitempty"` // want "field StructWithMinProperties should be a pointer."

	// structWithMinPropertiesOnStruct is a struct field with a minimum number of properties on the struct.
	// +optional
	StructWithMinPropertiesOnStruct *D `json:"structWithMinPropertiesOnStruct,omitempty"` // want "field StructWithMinPropertiesOnStruct should be a pointer."

	// slice is a slice field.
	// +optional
	Slice []string `json:"slice,omitempty"`

	// map is a map field.
	// +optional
	Map map[string]string `json:"map,omitempty"`

	// PointerSlice is a pointer slice field.
	// +optional
	PointerSlice []string `json:"pointerSlice,omitempty"` // want "field PointerSlice underlying type does not need to be a pointer. The pointer should be removed."

	// PointerMap is a pointer map field.
	// +optional
	PointerMap map[string]string `json:"pointerMap,omitempty"` // want "field PointerMap underlying type does not need to be a pointer. The pointer should be removed."

	// PointerPointerString is a double pointer string field.
	// +optional
	DoublePointerString *string `json:"doublePointerString,omitempty"` // want "field DoublePointerString underlying type does not need to be a pointer. The pointer should be removed."

    // PointerStringAlias is a pointer string alias field.
	// +optional
	PointerStringAlias *StringAlias `json:"pointerStringAlias,omitempty"`

    // PointerStringAliasFromAnotherFile is a pointer string alias field.
	// It proves that we can use types defined in other files.
	// +optional
	StringAliasFromAnotherFile *StringAliasFromAnotherFile `json:"pointerStringAliasFromAnotherFile,omitempty"`

	// PointerIntAlias is a pointer int alias field.
	// +optional
	PointerIntAlias *IntAlias `json:"pointerIntAlias,omitempty"`

	// PointerFloatAlias is a pointer float alias field.
	// +optional
	PointerFloatAlias *FloatAlias `json:"pointerFloatAlias,omitempty"`

	// PointerBoolAlias is a pointer bool alias field.
	// +optional
	PointerBoolAlias *BoolAlias `json:"pointerBoolAlias,omitempty"`

	// PointerSliceAlias is a pointer slice alias field.
	// +optional
	PointerSliceAlias SliceAlias `json:"pointerSliceAlias,omitempty"` // want "field PointerSliceAlias underlying type does not need to be a pointer. The pointer should be removed."

	// PointerMapAlias is a pointer map alias field.
	// +optional
	PointerMapAlias MapAlias `json:"pointerMapAlias,omitempty"` // want "field PointerMapAlias underlying type does not need to be a pointer. The pointer should be removed."

	// StringAliasWithEnum is a string alias field with enum validation.
	// With the "Always" pointer preference, optional fields should be pointers regardless of zero value validity.
	// +optional
	StringAliasWithEnum *StringAliasWithEnum `json:"stringAliasWithEnum,omitempty"` // want "field StringAliasWithEnum should be a pointer."

	// StringAliasWithEnumPointer is a pointer string alias field with enum validation.
	// This is correctly a pointer since the zero value is not valid.
	// +optional
	StringAliasWithEnumPointer *StringAliasWithEnum `json:"stringAliasWithEnumPointer,omitempty"`
	
	// StringAliasWithEnumNoOmitEmpty is a string alias field with enum validation and no omitempty.
	// +optional
	StringAliasWithEnumNoOmitEmpty *StringAliasWithEnum `json:"stringAliasWithEnumNoOmitEmpty,omitempty"` // want "field StringAliasWithEnumNoOmitEmpty should have the omitempty tag."
}

type B struct {
	// pointerString is a pointer string field.
	// +optional
	PointerString *string `json:"pointerString,omitempty"`
}

// +kubebuilder:validation:MinProperties=1
type D struct {
	// string is a string field.
	// +optional
	String *string `json:"string,omitempty"`

	// stringWithMinLength1 with minimum length is a string field.
	// +kubebuilder:validation:MinLength=1
	// +optional
	StringWithMinLength1 *string `json:"stringWithMinLength1,omitempty"`
}

type StringAlias string

type IntAlias int

type FloatAlias float64

type BoolAlias bool

type SliceAlias []string

type MapAlias map[string]string

// StringAliasWithEnum is a string alias with enum validation.
// The zero value ("") is not in the enum, making it invalid.
// +kubebuilder:validation:Enum=value1;value2
type StringAliasWithEnum string
