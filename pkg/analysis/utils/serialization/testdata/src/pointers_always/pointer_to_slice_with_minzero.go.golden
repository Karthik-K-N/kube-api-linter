package a

type TestPointerToSliceWithMinZeroAlways struct {
	// +kubebuilder:validation:MinItems=0
	PtrArrayWithZeroMinItems *[]string `json:"ptrArrayWithZeroMinItems,omitempty"`

	// +kubebuilder:validation:MinItems=0
	PtrArrayWithZeroMinItemsNoOmitEmpty *[]string `json:"ptrArrayWithZeroMinItemsNoOmitEmpty,omitempty"` // want "field PtrArrayWithZeroMinItemsNoOmitEmpty should have the omitempty tag."
}

type TestPointerToMapWithMinZeroAlways struct {
	// +kubebuilder:validation:MinProperties=0
	MapPtrWithZeroMinProperties *map[string]string `json:"mapPtrWithZeroMinProperties,omitempty"`

	// +kubebuilder:validation:MinProperties=0
	MapPtrWithZeroMinPropertiesNoOmitEmpty *map[string]string `json:"mapPtrWithZeroMinPropertiesNoOmitEmpty,omitempty"` // want "field MapPtrWithZeroMinPropertiesNoOmitEmpty should have the omitempty tag."
}

// Test that pointers ARE still flagged when MinItems/MinProperties is NOT zero
type TestPointerToSliceWithNonZeroMinAlways struct {
	// +kubebuilder:validation:MinItems=1
	PtrArrayWithNonZeroMinItems []string `json:"ptrArrayWithNonZeroMinItems,omitempty"` // want "field PtrArrayWithNonZeroMinItems underlying type does not need to be a pointer. The pointer should be removed."

	// No MinItems validation
	PtrArrayWithoutMinItems []string `json:"ptrArrayWithoutMinItems,omitempty"` // want "field PtrArrayWithoutMinItems underlying type does not need to be a pointer. The pointer should be removed."
}

type TestPointerToMapWithNonZeroMinAlways struct {
	// +kubebuilder:validation:MinProperties=1
	MapPtrWithNonZeroMinProperties map[string]string `json:"mapPtrWithNonZeroMinProperties,omitempty"` // want "field MapPtrWithNonZeroMinProperties underlying type does not need to be a pointer. The pointer should be removed."

	// No MinProperties validation
	MapPtrWithoutMinProperties map[string]string `json:"mapPtrWithoutMinProperties,omitempty"` // want "field MapPtrWithoutMinProperties underlying type does not need to be a pointer. The pointer should be removed."
}
