package a

type TestArrays struct {
	Array []string `json:"array"`

	ArrayWithOmitEmpty []string `json:"arrayWithOmitEmpty,omitempty"`

	ArrayPtr []*string `json:"arrayPtr"`

	ArrayWithOmitEmptyPtr []*string `json:"arrayWithOmitEmptyPtr,omitempty"`

	// +kubebuilder:validation:MinItems=1
	ArrayWithPositiveMinItems []string `json:"arrayWithPositiveMinItems,omitempty"` // want "field ArrayWithPositiveMinItems does not allow the zero value. It must have the omitempty tag."

	// +kubebuilder:validation:MinItems=1
	ArrayWithPositiveMinItemsWithOmitEmpty []string `json:"arrayWithPositiveMinItemsWithOmitEmpty,omitempty"`

	// +kubebuilder:validation:MinItems=0
	ArrayWithZeroMinItems []string `json:"arrayWithZeroMinItems"`

	// +kubebuilder:validation:MinItems=0
	ArrayWithZeroMinItemsWithOmitEmpty []string `json:"arrayWithZeroMinItemsWithOmitEmpty,omitempty"`

	ByteArray []byte `json:"byteArray"`

	ByteArrayWithOmitEmpty []byte `json:"byteArrayWithOmitEmpty,omitempty"`

	// +kubebuilder:validation:MinLength=1
	ByteArrayWithMinLength []byte `json:"byteArrayWithMinLength,omitempty"` // want "field ByteArrayWithMinLength does not allow the zero value. It must have the omitempty tag."

	// +kubebuilder:validation:MinLength=1
	ByteArrayWithMinLengthWithOmitEmpty []byte `json:"byteArrayWithMinLengthWithOmitEmpty,omitempty"`

	// +kubebuilder:validation:MinLength=0
	ByteArrayWithMinLength0 []byte `json:"byteArrayWithMinLength0"`

	// +kubebuilder:validation:MinLength=0
	ByteArrayWithMinLength0WithOmitEmpty []byte `json:"byteArrayWithMinLength0WithOmitEmpty,omitempty"`

	PtrArray []string `json:"ptrArray"` // want "field PtrArray does not have omitempty and allows the zero value. The field does not need to be a pointer."

	PtrArrayWithOmitEmpty []string `json:"ptrArrayWithOmitEmpty,omitempty"` // want "field PtrArrayWithOmitEmpty underlying type does not need to be a pointer. The pointer should be removed."
}
